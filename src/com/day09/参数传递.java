package com.day09;
/*
    封装 私有化 进行控制即可 使得属性变得安全

    对象与引用
     - 对象：
        目前使用new 运算符在堆中开辟的内存空间叫做对象

     - 引用：
        是一个变量，不一定是局部变量 可能为成员变量、引用变量、实例变量，指向了堆内存中保存的对象
        所有访问实例相关的额数据，需要进行引用点的方式，只有通过引用才能找到对象

    ------成员变量包括实例变量以及静态变量
    ------成员变量里面的变量有两个一个是实例变量（描述属性）一个是静态变量 不是静态就是你实例变量 引用变量在方法之中 局部变量也在方法之中
成员变量：作用范围是整个类，相当于C中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)；

实例变量：独立于与方法之外的变量，无static修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为0，布尔型默认值为false，
        引用类型默认值为null；
        实例变量是指在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。

静态变量(类变量)：独立于方法之外的变量，用static修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，
        调用一般是类名.静态变量名，也可以用对象名.静态变量名调用；
局部变量：类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化；

*/

public class 参数传递 {
    public static void main(String[] args) {
        // 不加 static 需要进行 类的实例化进行调用
        // 加上 static 使用类进行调用 这里的方法在一个类中可以直接调用
        int i = 10;
        add(i);
        System.out.println(" i的数值大小为： " + i);
    }

    public static void add(int i){
        i++;
        System.out.println("Add--->" + i);
    }
}

// 一个文件可以写几个类 但是类的前面不可以加上 public
