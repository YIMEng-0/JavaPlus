package com.day016.方法的覆盖;

/**
 * 方法的覆盖
 *      回顾方法的重载 overload
 *          1、什么是方法的重载？
 *                函数的名字相同，实现的东西大致相同，方便方法的调用
 *          2、什么条件满足方法的重载？
 *                同一个类中方法的功能是相似的，程序员的编程的方便
 *          3、方法的重载与什么无关？
 *                与变量的名字没有关系，仅仅与数据类型有关，数量有关
 *
 */


/**
 *  1、方法的覆盖 也叫做方法的重写 overwrite  override
 *
 *  2、什么时候使用方法的重写？为什么需要方法的重写呢？
 *      父类中的方法已经不够使用了
 *      子类需要一个更加完善的方法，执行相关的操作
 *      重写相当于发生了覆盖
 *
 *  3、在满足什么条件的时候需要方法的重载呢？
 *      在子类中方法的名字需要和父类是相同的；
 *      方法的覆盖发生在具有继承关系的父子类之间；
 *      访问的权限不能更低，可以更高；
 *      抛出的异常不能更多，可以更少；
 *
 *  4、建议在方法的重写的时候进行复制粘贴；
 *     不然容易出错；
 *
 *  5、注意：
 *      私有的方法不可以继承，所以不能覆盖
 *      构造方法不能覆盖；
 *      静态方法不能覆盖；
 *      覆盖只针对方法，不包含属性；
 */

/**
 *  实例变量在什么时候触发？构造方法执行的时候
 *  静态变量在类加载的时候触发
 *  实例变量在堆内存中，局部变量在栈内存中存储
 */
public class 方法的覆盖 {
    public static void main(String[] args) {

        // 创建动物的对象
        Animal animal = new Animal();
        animal.move();

        // 创建猫科类的动物对象
        Cat cat = new Cat();
        cat.move();

        // 创建鸟的对象
        Bird bird = new Bird();
        bird.move();
    }
}
