package com.day01_06;

/* 方法在运行的时候的内存分配 解释
    方法没有调用是不会分配内存的
    调用的时候进行动态的分配内存
    方法区内存
    栈内存
    堆内存

    3. 关于栈数据结构 stack 一种数据结构 不属于编程的范畴 是一门独立的学科 精通数据结构以及算法
    4. 常见的数据结构
    数组 队列 栈 链表 二叉树 哈希表 / 散列表  JavaSE 里面有数据结构

    栈 ： 进栈 出栈 Push Pop（进栈） （出栈）
    栈顶进行活跃 先进后出 最后进的先出 电梯的操作

    队列： 先进先出 排队即可

    4. 方法执行的时候 片段存在哪儿里
        方法代码片段放在方法区 .class 字节码文件的一部分 字节码文件在类加载的时候，将方法放在了方法区当中
        JVM 三块内存中 方法区最先存在数据
        代码片段只有一份 但是可以反复调用

        classloader 在硬盘上面寻找 HelloWorld.class（这是编译好的源代码文件） 将其加载到 JVM（里面有三块内存） 中 编译运行

        调用方法的时候，在栈中进行内存的分配 所以栈的空间是比较小的
        方法调用进行压栈动作 调用结束 释放空间 弹栈释放内存空间
        局部变量在 "方法体" 中进行声明 运行阶段在栈中进行内存的分配

        最后进入的方法 最先出去
 */
public class Method09 {
    public static void main(String[] args){

    }

}

/*
    方法的回顾
    修饰符列表 返回值类型 方法名（形式参数列表）
    方法体
*/
